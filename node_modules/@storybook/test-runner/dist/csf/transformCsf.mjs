var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { loadCsf } from "@storybook/csf-tools";
import * as t from "@babel/types";
import generate from "@babel/generator";
import { toId, storyNameFromExport } from "@storybook/csf";
import dedent from "ts-dedent";
import { getTagOptions } from "../util/getTagOptions";
const prefixFunction = /* @__PURE__ */ __name((key, title, testPrefixer) => {
  const name = storyNameFromExport(key);
  const context = {
    storyExport: t.identifier(key),
    name: t.stringLiteral(name),
    title: t.stringLiteral(title),
    id: t.stringLiteral(toId(title, name))
  };
  const result = makeArray(testPrefixer(context));
  const stmt = result[1];
  return stmt.expression;
}, "prefixFunction");
const makePlayTest = /* @__PURE__ */ __name(({ key, metaOrStoryPlay, title, testPrefix, shouldSkip }) => {
  return [
    t.expressionStatement(t.callExpression(shouldSkip ? t.identifier("it.skip") : t.identifier("it"), [
      t.stringLiteral(metaOrStoryPlay ? "play-test" : "smoke-test"),
      prefixFunction(key, title, testPrefix)
    ]))
  ];
}, "makePlayTest");
const makeDescribe = /* @__PURE__ */ __name((key, tests, beforeEachBlock) => {
  const blockStatements = beforeEachBlock ? [
    beforeEachBlock,
    ...tests
  ] : tests;
  return t.expressionStatement(t.callExpression(t.identifier("describe"), [
    t.stringLiteral(key),
    t.arrowFunctionExpression([], t.blockStatement(blockStatements))
  ]));
}, "makeDescribe");
const makeBeforeEach = /* @__PURE__ */ __name((beforeEachPrefixer) => {
  const stmt = beforeEachPrefixer();
  return t.expressionStatement(t.callExpression(t.identifier("beforeEach"), [
    stmt.expression
  ]));
}, "makeBeforeEach");
const makeArray = /* @__PURE__ */ __name((templateResult) => Array.isArray(templateResult) ? templateResult : [
  templateResult
], "makeArray");
const transformCsf = /* @__PURE__ */ __name((code, { clearBody = false, testPrefixer, beforeEachPrefixer, insertTestIfEmpty, makeTitle }) => {
  const { includeTags, excludeTags, skipTags } = getTagOptions();
  const csf = loadCsf(code, {
    makeTitle: makeTitle ?? ((userTitle) => userTitle)
  });
  csf.parse();
  const storyExports = Object.keys(csf._stories);
  const title = csf.meta?.title;
  const storyAnnotations = storyExports.reduce((acc, key) => {
    const annotations = csf._storyAnnotations[key];
    acc[key] = {};
    if (annotations?.play) {
      acc[key].play = annotations.play;
    }
    acc[key].tags = csf._stories[key].tags || csf.meta?.tags || [];
    return acc;
  }, {});
  const allTests = storyExports.filter((key) => {
    const isIncluded = includeTags.length === 0 || includeTags.some((tag) => storyAnnotations[key].tags?.includes(tag));
    const isNotExcluded = excludeTags.every((tag) => !storyAnnotations[key].tags?.includes(tag));
    return isIncluded && isNotExcluded;
  }).map((key) => {
    let tests = [];
    const shouldSkip = skipTags.some((tag) => storyAnnotations[key].tags?.includes(tag));
    if (title) {
      tests = [
        ...tests,
        ...makePlayTest({
          key,
          title,
          metaOrStoryPlay: !!storyAnnotations[key]?.play,
          testPrefix: testPrefixer,
          shouldSkip
        })
      ];
    }
    if (tests.length) {
      return makeDescribe(key, tests);
    }
  }).filter(Boolean);
  let result = "";
  if (!clearBody)
    result = `${result}${code}
`;
  if (allTests.length) {
    const describe = makeDescribe(csf.meta?.title, allTests, beforeEachPrefixer ? makeBeforeEach(beforeEachPrefixer) : void 0);
    const { code: describeCode } = generate(describe, {});
    result = dedent`
      ${result}
      if (!require.main) {
        ${describeCode}
      }
    `;
  } else if (insertTestIfEmpty) {
    result = `describe.skip('${csf.meta?.title}', () => { it('no-op', () => {}) });`;
  }
  return result;
}, "transformCsf");
export {
  prefixFunction,
  transformCsf
};
