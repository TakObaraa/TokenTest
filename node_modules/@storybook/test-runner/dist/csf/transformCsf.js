"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transformCsf_exports = {};
__export(transformCsf_exports, {
  prefixFunction: () => prefixFunction,
  transformCsf: () => transformCsf
});
module.exports = __toCommonJS(transformCsf_exports);
var import_csf_tools = require("@storybook/csf-tools");
var t = __toESM(require("@babel/types"));
var import_generator = __toESM(require("@babel/generator"));
var import_csf = require("@storybook/csf");
var import_ts_dedent = __toESM(require("ts-dedent"));
var import_getTagOptions = require("../util/getTagOptions");
const prefixFunction = /* @__PURE__ */ __name((key, title, testPrefixer) => {
  const name = (0, import_csf.storyNameFromExport)(key);
  const context = {
    storyExport: t.identifier(key),
    name: t.stringLiteral(name),
    title: t.stringLiteral(title),
    id: t.stringLiteral((0, import_csf.toId)(title, name))
  };
  const result = makeArray(testPrefixer(context));
  const stmt = result[1];
  return stmt.expression;
}, "prefixFunction");
const makePlayTest = /* @__PURE__ */ __name(({ key, metaOrStoryPlay, title, testPrefix, shouldSkip }) => {
  return [
    t.expressionStatement(t.callExpression(shouldSkip ? t.identifier("it.skip") : t.identifier("it"), [
      t.stringLiteral(metaOrStoryPlay ? "play-test" : "smoke-test"),
      prefixFunction(key, title, testPrefix)
    ]))
  ];
}, "makePlayTest");
const makeDescribe = /* @__PURE__ */ __name((key, tests, beforeEachBlock) => {
  const blockStatements = beforeEachBlock ? [
    beforeEachBlock,
    ...tests
  ] : tests;
  return t.expressionStatement(t.callExpression(t.identifier("describe"), [
    t.stringLiteral(key),
    t.arrowFunctionExpression([], t.blockStatement(blockStatements))
  ]));
}, "makeDescribe");
const makeBeforeEach = /* @__PURE__ */ __name((beforeEachPrefixer) => {
  const stmt = beforeEachPrefixer();
  return t.expressionStatement(t.callExpression(t.identifier("beforeEach"), [
    stmt.expression
  ]));
}, "makeBeforeEach");
const makeArray = /* @__PURE__ */ __name((templateResult) => Array.isArray(templateResult) ? templateResult : [
  templateResult
], "makeArray");
const transformCsf = /* @__PURE__ */ __name((code, { clearBody = false, testPrefixer, beforeEachPrefixer, insertTestIfEmpty, makeTitle }) => {
  const { includeTags, excludeTags, skipTags } = (0, import_getTagOptions.getTagOptions)();
  const csf = (0, import_csf_tools.loadCsf)(code, {
    makeTitle: makeTitle ?? ((userTitle) => userTitle)
  });
  csf.parse();
  const storyExports = Object.keys(csf._stories);
  const title = csf.meta?.title;
  const storyAnnotations = storyExports.reduce((acc, key) => {
    const annotations = csf._storyAnnotations[key];
    acc[key] = {};
    if (annotations?.play) {
      acc[key].play = annotations.play;
    }
    acc[key].tags = csf._stories[key].tags || csf.meta?.tags || [];
    return acc;
  }, {});
  const allTests = storyExports.filter((key) => {
    const isIncluded = includeTags.length === 0 || includeTags.some((tag) => storyAnnotations[key].tags?.includes(tag));
    const isNotExcluded = excludeTags.every((tag) => !storyAnnotations[key].tags?.includes(tag));
    return isIncluded && isNotExcluded;
  }).map((key) => {
    let tests = [];
    const shouldSkip = skipTags.some((tag) => storyAnnotations[key].tags?.includes(tag));
    if (title) {
      tests = [
        ...tests,
        ...makePlayTest({
          key,
          title,
          metaOrStoryPlay: !!storyAnnotations[key]?.play,
          testPrefix: testPrefixer,
          shouldSkip
        })
      ];
    }
    if (tests.length) {
      return makeDescribe(key, tests);
    }
  }).filter(Boolean);
  let result = "";
  if (!clearBody)
    result = `${result}${code}
`;
  if (allTests.length) {
    const describe = makeDescribe(csf.meta?.title, allTests, beforeEachPrefixer ? makeBeforeEach(beforeEachPrefixer) : void 0);
    const { code: describeCode } = (0, import_generator.default)(describe, {});
    result = import_ts_dedent.default`
      ${result}
      if (!require.main) {
        ${describeCode}
      }
    `;
  } else if (insertTestIfEmpty) {
    result = `describe.skip('${csf.meta?.title}', () => { it('no-op', () => {}) });`;
  }
  return result;
}, "transformCsf");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  prefixFunction,
  transformCsf
});
