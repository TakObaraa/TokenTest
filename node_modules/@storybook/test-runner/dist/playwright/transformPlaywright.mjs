var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { relative } from "path";
import template from "@babel/template";
import { userOrAutoTitle } from "@storybook/preview-api";
import { getStorybookMetadata } from "../util";
import { transformCsf } from "../csf/transformCsf";
import dedent from "ts-dedent";
const coverageErrorMessage = dedent`
  [Test runner] An error occurred when evaluating code coverage:
  The code in this story is not instrumented, which means the coverage setup is likely not correct.
  More info: https://github.com/storybookjs/test-runner#setting-up-code-coverage
`;
const testPrefixer = /* @__PURE__ */ __name((context) => {
  return template(`
    console.log({ id: %%id%%, title: %%title%%, name: %%name%%, storyExport: %%storyExport%% });
    async () => {
      const testFn = async() => {
        const context = { id: %%id%%, title: %%title%%, name: %%name%% };

        if(globalThis.__sbPreVisit) {
          await globalThis.__sbPreVisit(page, context);
        }

        const result = await page.evaluate(({ id, hasPlayFn }) => __test(id, hasPlayFn), {
          id: %%id%%,
        });
  
        if(globalThis.__sbPostVisit) {
          await globalThis.__sbPostVisit(page, context);
        }

        if(globalThis.__sbCollectCoverage) {
        const isCoverageSetupCorrectly = await page.evaluate(() => '__coverage__' in window);
          if (!isCoverageSetupCorrectly) {
            throw new Error(\`${coverageErrorMessage}\`);
          }

          await jestPlaywright.saveCoverage(page);
        }


        return result;
      };

      try {
        await testFn();
      } catch(err) {
        if(err.toString().includes('Execution context was destroyed')) {
          console.log(\`An error occurred in the following story, most likely because of a navigation: "\${%%title%%}/\${%%name%%}". Retrying...\`);
          await jestPlaywright.resetPage();
          await globalThis.__sbSetupPage(globalThis.page, globalThis.context);
          await testFn();
        } else {
          throw err;
        }
      }
    }
  `, {
    plugins: [
      "jsx"
    ]
  })({
    ...context
  });
}, "testPrefixer");
const makeTitleFactory = /* @__PURE__ */ __name((filename) => {
  const { workingDir, normalizedStoriesEntries } = getStorybookMetadata();
  const filePath = `./${relative(workingDir, filename)}`;
  return (userTitle) => userOrAutoTitle(filePath, normalizedStoriesEntries, userTitle);
}, "makeTitleFactory");
const transformPlaywright = /* @__PURE__ */ __name((src, filename) => {
  const transformOptions = {
    testPrefixer,
    insertTestIfEmpty: true,
    clearBody: true,
    makeTitle: makeTitleFactory(filename)
  };
  const result = transformCsf(src, transformOptions);
  return result;
}, "transformPlaywright");
export {
  testPrefixer,
  transformPlaywright
};
