var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import * as t from "@babel/types";
import generate from "@babel/generator";
import { toId } from "@storybook/csf";
import { testPrefixer } from "./transformPlaywright";
import { getTagOptions } from "../util/getTagOptions";
const makeTest = /* @__PURE__ */ __name(({ entry, shouldSkip, metaOrStoryPlay }) => {
  const result = testPrefixer({
    name: t.stringLiteral(entry.name),
    title: t.stringLiteral(entry.title),
    id: t.stringLiteral(entry.id),
    // FIXME
    storyExport: t.identifier(entry.id)
  });
  const stmt = result[1];
  return t.expressionStatement(t.callExpression(shouldSkip ? t.identifier("it.skip") : t.identifier("it"), [
    t.stringLiteral(metaOrStoryPlay ? "play-test" : "smoke-test"),
    stmt.expression
  ]));
}, "makeTest");
const makeDescribe = /* @__PURE__ */ __name((title, stmts) => {
  if (stmts.length === 0) {
    const noOpIt = t.expressionStatement(t.callExpression(t.identifier("it"), [
      t.stringLiteral("no-op"),
      t.arrowFunctionExpression([], t.blockStatement([]))
    ]));
    return t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("describe"), t.identifier("skip")), [
      t.stringLiteral(title),
      t.arrowFunctionExpression([], t.blockStatement([
        noOpIt
      ]))
    ]));
  }
  return t.expressionStatement(t.callExpression(t.identifier("describe"), [
    t.stringLiteral(title),
    t.arrowFunctionExpression([], t.blockStatement(stmts))
  ]));
}, "makeDescribe");
const isV3DocsOnly = /* @__PURE__ */ __name((stories) => stories.length === 1 && stories[0].name === "Page", "isV3DocsOnly");
function v3TitleMapToV4TitleMap(titleIdToStories) {
  return Object.fromEntries(Object.entries(titleIdToStories).map(([id, stories]) => [
    id,
    stories.map(({ parameters, ...story }) => ({
      type: isV3DocsOnly(stories) ? "docs" : "story",
      ...story
    }))
  ]));
}
__name(v3TitleMapToV4TitleMap, "v3TitleMapToV4TitleMap");
function groupByTitleId(entries) {
  return entries.reduce((acc, entry) => {
    const titleId = toId(entry.title);
    acc[titleId] = acc[titleId] || [];
    acc[titleId].push(entry);
    return acc;
  }, {});
}
__name(groupByTitleId, "groupByTitleId");
const transformPlaywrightJson = /* @__PURE__ */ __name((index) => {
  let titleIdToEntries;
  if (index.v === 3) {
    const titleIdToStories = groupByTitleId(Object.values(index.stories));
    titleIdToEntries = v3TitleMapToV4TitleMap(titleIdToStories);
  } else if (index.v === 4) {
    titleIdToEntries = groupByTitleId(Object.values(index.entries));
  } else {
    throw new Error(`Unsupported version ${index.v}`);
  }
  const { includeTags, excludeTags, skipTags } = getTagOptions();
  const titleIdToTest = Object.entries(titleIdToEntries).reduce((acc, [titleId, entries]) => {
    const stories = entries.filter((s) => s.type !== "docs");
    if (stories.length) {
      const storyTests = stories.filter((story) => {
        const isIncluded = includeTags.length === 0 || includeTags.some((tag) => story.tags?.includes(tag));
        const isNotExcluded = excludeTags.every((tag) => !story.tags?.includes(tag));
        return isIncluded && isNotExcluded;
      }).map((story) => {
        const shouldSkip = skipTags.some((tag) => story.tags?.includes(tag));
        return makeDescribe(story.name, [
          makeTest({
            entry: story,
            shouldSkip,
            metaOrStoryPlay: story.tags?.includes("play-fn") ?? false
          })
        ]);
      });
      const program = t.program([
        makeDescribe(stories[0].title, storyTests)
      ]);
      const { code } = generate(program, {});
      acc[titleId] = code;
    }
    return acc;
  }, {});
  return titleIdToTest;
}, "transformPlaywrightJson");
export {
  makeDescribe,
  transformPlaywrightJson
};
