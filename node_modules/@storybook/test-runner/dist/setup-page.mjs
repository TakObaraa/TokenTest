var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import readPackageUp from "read-pkg-up";
import { getTestRunnerConfig } from "./util/getTestRunnerConfig";
import { readFile } from "node:fs/promises";
import path from "node:path";
const defaultPrepare = /* @__PURE__ */ __name(async ({ page, browserContext, testRunnerConfig }) => {
  const targetURL = process.env.TARGET_URL;
  const iframeURL = new URL("iframe.html", targetURL).toString();
  if (testRunnerConfig?.getHttpHeaders) {
    const headers = await testRunnerConfig.getHttpHeaders(iframeURL);
    await browserContext.setExtraHTTPHeaders(headers);
  }
  await page.goto(iframeURL, {
    waitUntil: "load"
  }).catch((err) => {
    if (err.message?.includes("ERR_CONNECTION_REFUSED")) {
      const errorMessage = `Could not access the Storybook instance at ${targetURL}. Are you sure it's running?

${err.message}`;
      throw new Error(errorMessage);
    }
    throw err;
  });
}, "defaultPrepare");
const setupPage = /* @__PURE__ */ __name(async (page, browserContext) => {
  const targetURL = process.env.TARGET_URL;
  const failOnConsole = process.env.TEST_CHECK_CONSOLE;
  const viewMode = process.env.VIEW_MODE ?? "story";
  const renderedEvent = viewMode === "docs" ? "docsRendered" : "storyRendered";
  const { packageJson } = await readPackageUp();
  const { version: testRunnerVersion } = packageJson;
  const referenceURL = process.env.REFERENCE_URL;
  const debugPrintLimit = process.env.DEBUG_PRINT_LIMIT ? Number(process.env.DEBUG_PRINT_LIMIT) : 1e3;
  if ("TARGET_URL" in process.env && !process.env.TARGET_URL) {
    console.warn(`Received TARGET_URL but with a falsy value: ${process.env.TARGET_URL}. Please fix it.`);
  }
  const testRunnerConfig = getTestRunnerConfig() || {};
  if (testRunnerConfig?.prepare) {
    await testRunnerConfig.prepare({
      page,
      browserContext,
      testRunnerConfig
    });
  } else {
    await defaultPrepare({
      page,
      browserContext,
      testRunnerConfig
    });
  }
  await page.exposeBinding("logToPage", (_, message) => console.log(message));
  const finalStorybookUrl = referenceURL ?? targetURL ?? "";
  const scriptLocation = require.resolve(path.join(__dirname, "setup-page-script.mjs"));
  const content = (await readFile(scriptLocation, "utf-8")).replaceAll("{{storybookUrl}}", finalStorybookUrl).replaceAll("{{failOnConsole}}", failOnConsole ?? "false").replaceAll("{{renderedEvent}}", renderedEvent).replaceAll("{{testRunnerVersion}}", testRunnerVersion).replaceAll("{{logLevel}}", testRunnerConfig.logLevel ?? "info").replaceAll("{{debugPrintLimit}}", debugPrintLimit.toString());
  await page.addScriptTag({
    content
  });
}, "setupPage");
export {
  setupPage
};
