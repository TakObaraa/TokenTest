"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setup_page_exports = {};
__export(setup_page_exports, {
  setupPage: () => setupPage
});
module.exports = __toCommonJS(setup_page_exports);
var import_read_pkg_up = __toESM(require("read-pkg-up"));
var import_getTestRunnerConfig = require("./util/getTestRunnerConfig");
var import_promises = require("node:fs/promises");
var import_node_path = __toESM(require("node:path"));
const defaultPrepare = /* @__PURE__ */ __name(async ({ page, browserContext, testRunnerConfig }) => {
  const targetURL = process.env.TARGET_URL;
  const iframeURL = new URL("iframe.html", targetURL).toString();
  if (testRunnerConfig?.getHttpHeaders) {
    const headers = await testRunnerConfig.getHttpHeaders(iframeURL);
    await browserContext.setExtraHTTPHeaders(headers);
  }
  await page.goto(iframeURL, {
    waitUntil: "load"
  }).catch((err) => {
    if (err.message?.includes("ERR_CONNECTION_REFUSED")) {
      const errorMessage = `Could not access the Storybook instance at ${targetURL}. Are you sure it's running?

${err.message}`;
      throw new Error(errorMessage);
    }
    throw err;
  });
}, "defaultPrepare");
const setupPage = /* @__PURE__ */ __name(async (page, browserContext) => {
  const targetURL = process.env.TARGET_URL;
  const failOnConsole = process.env.TEST_CHECK_CONSOLE;
  const viewMode = process.env.VIEW_MODE ?? "story";
  const renderedEvent = viewMode === "docs" ? "docsRendered" : "storyRendered";
  const { packageJson } = await (0, import_read_pkg_up.default)();
  const { version: testRunnerVersion } = packageJson;
  const referenceURL = process.env.REFERENCE_URL;
  const debugPrintLimit = process.env.DEBUG_PRINT_LIMIT ? Number(process.env.DEBUG_PRINT_LIMIT) : 1e3;
  if ("TARGET_URL" in process.env && !process.env.TARGET_URL) {
    console.warn(`Received TARGET_URL but with a falsy value: ${process.env.TARGET_URL}. Please fix it.`);
  }
  const testRunnerConfig = (0, import_getTestRunnerConfig.getTestRunnerConfig)() || {};
  if (testRunnerConfig?.prepare) {
    await testRunnerConfig.prepare({
      page,
      browserContext,
      testRunnerConfig
    });
  } else {
    await defaultPrepare({
      page,
      browserContext,
      testRunnerConfig
    });
  }
  await page.exposeBinding("logToPage", (_, message) => console.log(message));
  const finalStorybookUrl = referenceURL ?? targetURL ?? "";
  const scriptLocation = require.resolve(import_node_path.default.join(__dirname, "setup-page-script.mjs"));
  const content = (await (0, import_promises.readFile)(scriptLocation, "utf-8")).replaceAll("{{storybookUrl}}", finalStorybookUrl).replaceAll("{{failOnConsole}}", failOnConsole ?? "false").replaceAll("{{renderedEvent}}", renderedEvent).replaceAll("{{testRunnerVersion}}", testRunnerVersion).replaceAll("{{logLevel}}", testRunnerConfig.logLevel ?? "info").replaceAll("{{debugPrintLimit}}", debugPrintLimit.toString());
  await page.addScriptTag({
    content
  });
}, "setupPage");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setupPage
});
